%include ~/code/pa-config-files/pa-hgrc

[ui]
username = David Shepherd <david.shepherd@biositesystems.com>
ignore = ~/.hgignore
editor = emacsclient -c
merge = emacsclient
interface = curses

[pager]
pager = less -F -R -X -S
attend=
ignore=crecord,histedit,he,revert,pull,push,commit,update,up,rebase,mv,rm,ungulp,record,merge,rebase,ci,stnw,cia,autobisect,bisect,resolve,clean-ws,cgulp-xenon,cgulp,pr,pr-stable,pr-staging,lg-watch,import,pulls,pulla,push-as-master,lg1
attend-commit = false

[extensions]
pager =
progress =
color =
purge =
shelve =
graphlog =
record =
histedit =
remotebranches = ~/.hgex/hg-remotebranches/hg_remotebranches.py
rebase =
transplant =
hggit =

[color]

custom.tag = yellow bold
custom.bookmark = yellow
custom.author = blue bold
custom.time = green

changeset.public=red
changeset.secret=blue
changeset.draft=green

[revsetalias]

this_branch_simple($1) = reverse(ancestors($1)) - keyword('chore(gulp)') - merge() - keyword('chore(bower)')

# Get the last branching commit (i.e. last commit with multiple descendents)
prev_branchpoint($1) = last(ancestors($1) and branchpoint())

# Get the commit after the last branch (i.e. what you rebase from if you do rebase -b $1).
base($1) = last(limit(reverse(last(prev_branchpoint($1)::$1)),2))

anc($1) = reverse(ancestors($1))

[merge-tools]
emacsclient.premerge = True
emacsclient.args = -c --eval "(emerge-files-with-ancestor nil \""$local"\" \""$other"\" \""$base"\" \""$output"\" nil #'delete-frame)"
# I don't know what's going on with the quoting on the line above, but it seems to be necessary

[alias]

# Biosite stuff
#########

# Interact with RhodeCode
pull-request = !sensible-browser "$(hg paths "$1" | sed 's/^git\+//')/pull-request/new" &
pr = !$HG push "review"  -f "$@" && $HG pull-request "review"
pr-stable = !$HG push review-stable -f "$@" && $HG pull-request review-stable
pr-staging = !$HG push review-staging -f "$@" && $HG pull-request review-staging

ccommon = commit -m "chore(common): Update common" 'path:common'

# General stuff
##############

# pretty log graph
lg1 = log --color=always -G --template "{if(tags, label('custom.tag','[ {tags} ] '))}{if(bookmarks, label('custom.bookmark','[ {bookmarks} ] '))}{label('changeset.{phase}', node|short)} {desc|firstline} {label('custom.time',date|age)} {label('custom.author',author|person)}"
lg = !$HG lg1 -r 'sort(all(), topo, topo.firstbranch=.)' "$@" | sed -e '1i\\' 2>/dev/null | less -FRXS

lg-watch = !/usr/bin/watch -n 0.3 -c -x hg lg --limit 150

lp = log -p -v --color=always -r 'this_branch_simple(.)' --git
lgs = log --color=always -G --template "{if(tags, label('custom.tag','[ {tags} ] '))}{if(bookmarks, label('custom.bookmark','[ {bookmarks} ] '))}{label('changeset.{phase}', node|short)} {desc|firstline} {label('custom.time',date|age)} {label('custom.author',author|person)}" -r 'this_branch_simple(.)'

# status including subrepos and with path relative to cwd
s = !$HG status -S "" --color=always "$@" -n | sed -e '1i\\' 2>/dev/null | less -FRXS
st = !$HG status -S "" --color=always "$@" -n | less -FRXS

substatus = !cd "$($HG root)" && awk '{print $$2}' .hgsubstate | xargs -n1 -I{} sh -c 'cd {} && hg status'
subrepos-are-clean = ![ "$($HG substatus)" = "" ]

# st with numberwang selection
stnw = !$HG status --no-status --color=always -S $($HG root) "$@" | nwc

# View shelved changesets
shs = !$HG shelve --list --patch $@ --color=always | less -FRXS

# Manifest with better xargs integration
manifest0 = !$HG manifest | tr '\n' '\0'

# Side by side diff
sdiff = !$HG diff $@ | cdiff -s

# diff --git gives better file rename info
diff = diff --git

# "undo" commiting.
doagain = !hg-do-again.sh

# Get the real hash of a revision (as needed for hgsubstate)
idfull = !$HG --debug id -i "$@"


# Clean up whitespace, warning: not well tested yet, potentially dangerous
clean-ws = !hg-clean-whitespace.sh

# Single command bisection, usage: `hg autobisect [GOOD] [BAD] [COMPILE COMMAND] [TEST COMMAND]
# e.g. hg autobisect foo tip "cmake . && ninja test-foo" "./test-foo foos"
autobisect = !$HG status && $HG bisect --reset && $HG bisect --good "$1" && $HG bisect --bad "$2" && $HG bisect --command "($3) && ($4) || exit 125"

# histedit with default revision the earliest multable revision on this branch
he = histedit -r 'min((draft() or secret()) and only(.))'

# Backout a revset of changes
backout-commit = !$HG backout --no-commit -r "$1" && $HG commit -m "Backed out $1"
multi-backout = !$HG log -r "sort($1, topo)" -T "{node}\n" | xargs -n1 $HG backout-commit

cmerge = commit -m "Merge"

# Show strip backups against the current repository using hg in. Any arguments are passed to hg in (so e.g. you can use -p to show full patches).
show-strip-backups = !HGPLAIN="true" ls -d -1 "$(hg root)/.hg/strip-backup/"* -t | xargs -I{} -n 1 sh -c 'hg in --color=always {} "$@" 2>&1 || true' | less -FRX
# HGPLAIN=true is set so that aliases etc don't ruin things, the command is run in sh with `|| true` so that failed attempts to compare a backup file against the current repo don't kill the command.

ci = commit -i
cia = ci --amend

multi-released =!$HG log -r "descendants($1) and tag('re:boron-[0-9]+\.[0-9]+\.[0-9]+$')" --template '$1 was released in {tags} on {date|isodate}\n'

uncommit = !$HG strip -r ${1:-.} --keep

push-as = !hg-push-as.py --mercurial-binary "$HG" "$@"
